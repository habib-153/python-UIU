# with open('sparseGraph.txt', 'r') as f:
#     n, m = map(int, f.readline().split())
#     edgeList = []
#     for _ in range(m):
#         u, v, w = map(int, f.readline().split())
#         edgeList.append((w, u, v))
    

# # Disjoint Set Union (DSU) or Union-Find data structure implementation
# parent = [i for i in range(n)]
# rank = [0] * n

# def find(i):
#     if parent[i] == i:
#         return i
#     else:
#         parent[i] = find(parent[i])
#         return parent[i]
# def union(x, y):
#     xroot = find(x)
#     yroot = find(y)
#     if rank[xroot] < rank[yroot]:
#         parent[xroot] = yroot
#     elif rank[xroot] > rank[yroot]:
#         parent[yroot] = xroot
#     else:
#         parent[yroot] = xroot
#         rank[xroot] += 1
        
# def kruskal(edgeList):
#     edgeList.sort()  # Sort edges by weight
#     total_weight = 0
#     mst_edges = [] # List to store edges in the MST
    
#     for w, u, v in edgeList:
#         if find(u) != find(v):  # If u and v are not connected
#             union(u, v)  # Connect u and v
#             total_weight += w
#             mst_edges.append((u, v, w))  # Store the edge in the MST
            
#     return total_weight, mst_edges

# kruskal_weight, mst_edges = kruskal(edgeList)

# print(f"MST(Kruskal) total weight: {kruskal_weight}")



#kruskal
nodes = ['A', 'B', 'C', 'D']
edges = [
    ('A', 'B', 1),
    ('A', 'C', 3),
    ('B', 'C', 1),
    ('B', 'D', 6),
    ('C', 'D', 2)
]


def find(parent, node):
	while parent[node] != node:
		node = parent[node]

	return node


def union(parent, rank, u, v):
	root_u = find(parent, u)
	root_v = find(parent, v)

	if root_u != root_v:
		if rank[root_u] > rank[root_v]:
			parent[root_v] = root_u

		elif rank[root_v] > rank[root_u]:
			parent[root_u] = root_v

		else:
			parent[root_u] = root_v
			rank[root_v] += 1

		return True
	else:
		return False


def kruskal(nodes, edges):

	def second_pos(tpl):
		return tpl[2]

	edges.sort(key=second_pos)

	parent = {node: node for node in nodes}
	rank = {node: 0 for node in nodes}

	total_cost = 0

	for u, v, w in edges:
		if union(parent, rank, u, v) == True:
			total_cost += w

	return total_cost


print("Total cost of MST:", kruskal(nodes, edges))



# Prim's

graph = {
    'A': [('B', 1), ('C', 3)],
    'B': [('A', 1), ('C', 1), ('D', 6)],
    'C': [('A', 3), ('B', 1), ('D', 2)],
    'D': [('B', 6), ('C', 2)]
}

start_node = 'A'


import heapq

def prims_algorithm(graph, start):
    visited = set()
    min_heap = [(0, start)]  # (cost, node)
    total_cost = 0

    while min_heap:
        cost, node = heapq.heappop(min_heap)

        if node in visited:
            continue

        visited.add(node)
        total_cost += cost

        for neighbor, edge_cost in graph[node]:
            if neighbor not in visited:
                heapq.heappush(min_heap, (edge_cost, neighbor))

    return total_cost
    
print("Total cost of MST:", prims_algorithm(graph, start_node))



# rabin karp

text = "Before was was was, was was is."
pattern = "was"

def string_to_num(s):
	num = 0
	order = 1
	
	for i in s:
		num += ord(i) * order
		order *= 10
	
	return num

pattern_hash = string_to_num(pattern)
substring_hash = string_to_num(text[:len(pattern)])

for i in range(len(text)-len(pattern)):
	if pattern_hash == substring_hash:
		print(f"Pattern found at position: {i}.")
	
	substring_hash -= ord(text[i])
	substring_hash /= 10
	substring_hash += ord(text[i+len(pattern)]) * (10 ** (len(pattern)-1))



# Naive Pattern Matching

text = "Before was was was, was was is."
pattern = "was"

splitted = text.split()
cnt = 0
ind = []

for i,word in enumerate(splitted):
	if pattern in word:
		cnt += 1
		ind.append(i)


print(f"'{pattern}' is found total {cnt} times. Positions are: ")
for j in ind:
	print(j)




# bellman ford

n = 5 # nodes = 0 -> (n-1)
edges = [[0,1,10],  # edge = [u,v,w]
		 [0,2,3],
		 [1,3,2],
		 [2,1,4],
		 [2,3,8],
		 [2,4,2],
		 [3,4,5]]
src = 0

def shortest_path(n,edges,src):
	
	dst = [float("inf")] * n
	dst[src] = 0
	
	for _ in range(n+1):
		for u,v,w in edges:
			if dst[u] != float('inf') and dst[u] + w < dst[v]:
				
				dst[v] = dst[u] + w
				
	for u, v, w in edges:
        if dist[u] != float('inf') and dist[u] + w < dist[v]:
            
            return "Negative weight cycle detected"
	
			
	for i in range(n):
		if dst[i] == float('inf'):
			dst[i] = -1
	
	return {i:dst[i] for i in range(n)}

x = shortest_path(n,edges,src)
print(x)




# Djikstra Algorithm

n = 5 # nodes = 0 -> (n-1)
edges = [[0,1,10],  # edge = [u,v,w]
		 [0,2,3],
		 [1,3,2],
		 [2,1,4],
		 [2,3,8],
		 [2,4,2],
		 [3,4,5]]
src = 0

import heapq

def shortest_path(n,edges,src):
	adj = {}
	for i in range(n):
		adj[i] = []
	
	for s,d,w in edges:
		adj[s].append([w,d])
	
	shortest = {}
	minheap = [[0,src]] # 
	
	while minheap:
		w1, n1 = heapq.heappop(minheap)
		if n1 in shortest:
			continue
			
		shortest[n1] = w1 # n1 selected
		
		for w2, n2 in adj[n1]: # updating
			if n2 not in shortest:
				heapq.heappush(minheap,[w1 + w2, n2])
	
	for i in range(n): # unreachable
		if i not in shortest:
			shortest[i] = -1
			
	return shortest
	
x = shortest_path(n,edges,src)
print(x)
